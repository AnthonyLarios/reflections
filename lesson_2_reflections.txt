-1-
What happens when you initialize a repository? Why do 
you need to do it?

You create a .git folder when you initialize a 
repository, which allows you to make commits into it.


-2-How is the staging area different from the working 
area and the reppository? What value do you think it 
offers?

The staging area is the middle man for how you want to 
add files into git. You can create logical commits with
the staging area.


-3-How can you use the staging area to make sure you have 
one commit per logical change?

You can see what is ready for commit and make sure that
the desired files are in the staging area and reflect 
the logical change.


-4-What are some situations when branches would be 
helpful in keeping your history organized? How would 
branches help?

Branching can help diverge from a project by exploring 
different elements or ideas. You can seperate a main 
project from the other, or later merge the branch with 
the main head if desired.


-5-How do the diagrams help you visualize the branch 
structure?

Diagrams help indicate where each branch connects
with each other and the reachability of each commit 
in the project.


-6-What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

The two merging branches are now reachable an act as one
branch. We still represent the merge diagram the way we
do in order to show the true parent of each commit,
rather than it time stamp parent, which occurs when
merging two branches.


-7-What are the pros and cons of Git's automatic merging
versus always doing merging manually?

Git's automatic merging is faster and includes additions
and deletions to the merge. It can also notify you of any
conflict in the code and lets you resolve it manually.